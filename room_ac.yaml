esphome:
  name: "my_hisense_ac"
  friendly_name: ac
  includes:
    #- aircon_climate.h
    - hisense_ac.h

esp8266:
  board: esp01_1m

uart:
  id: uart_bus
  tx_pin: GPIO01
  rx_pin: GPIO03
  baud_rate: 9600

# Enable logging
logger:
  # level: VERBOSE
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "="

ota:
  password: ""

wifi:
  ssid: 
  password: 
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ac Fallback Hotspot"
    password: ""

captive_portal:
    
web_server:
  port: 80

globals:
  - id: compressor_frequency
    type: Sensor*
  - id: compressor_frequency_setting
    type: Sensor*
  - id: compressor_frequency_send
    type: Sensor*
  - id: outdoor_temperature
    type: Sensor*
  - id: outdoor_condenser_temperature
    type: Sensor*
  - id: compressor_exhaust_temperature
    type: Sensor*
  - id: target_exhaust_temperature
    type: Sensor*
  - id: indoor_pipe_temperature
    type: Sensor*
  - id: indoor_humidity_setting
    type: Sensor*
  - id: indoor_humidity_status
    type: Sensor*

climate:
- platform: custom
  id: my_climate
  lambda: |-
    auto aircon_climate = new AirconClimate(id(uart_bus));
    App.register_component(aircon_climate);
    id(compressor_frequency) = &aircon_climate->compressor_frequency;
    id(compressor_frequency_setting) = &aircon_climate->compressor_frequency_setting;
    id(compressor_frequency_send) = &aircon_climate->compressor_frequency_send;
    id(outdoor_temperature) = &aircon_climate->outdoor_temperature;
    id(outdoor_condenser_temperature) = &aircon_climate->outdoor_condenser_temperature;
    id(compressor_exhaust_temperature) = &aircon_climate->compressor_exhaust_temperature;
    id(target_exhaust_temperature) = &aircon_climate->target_exhaust_temperature;
    id(indoor_pipe_temperature) = &aircon_climate->indoor_pipe_temperature;
    id(indoor_humidity_setting) = &aircon_climate->indoor_humidity_setting;
    id(indoor_humidity_status) = &aircon_climate->indoor_humidity_status;
    return {aircon_climate};
  climates:
    - name: "Aircon Climate"

sensor: # those sensors not work on my AC, can't read any sensors data from RX.
- platform: custom
  lambda: |-
    return {
      id(compressor_frequency),
      id(compressor_frequency_setting),
      id(compressor_frequency_send),
      id(outdoor_temperature),
      id(outdoor_condenser_temperature),
      id(compressor_exhaust_temperature),
      id(target_exhaust_temperature),
      id(indoor_pipe_temperature),
      id(indoor_humidity_setting),
      id(indoor_humidity_status)
    };
  sensors:
  - name: "Compressor Frequency"
    unit_of_measurement: "Hz"
    device_class: "frequency"
    state_class: "measurement"
  - name: "Compressor Frequency Setting"
    unit_of_measurement: "Hz"
    device_class: "frequency"
    state_class: "measurement"
  - name: "Compressor Frequency Send"
    unit_of_measurement: "Hz"
    device_class: "frequency"
    state_class: "measurement"
  - name: "Outdoor Temperature"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
  - name: "Outdoor Condenser Temperature"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
  - name: "Compressor Exhaust Temperature"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
  - name: "Target Exhaust Temperature"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
  - name: "Indoor Evaporator Inlet Temperature"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
  - name: "Indoor Humidity setting"
    unit_of_measurement: "%"
    icon: "mdi:water-percent"
    device_class: "humidity"
    state_class: "measurement"
  - name: "Indoor Humidity status"
    unit_of_measurement: "%"
    icon: "mdi:water-percent"
    device_class: "humidity"
    state_class: "measurement"
    
- platform: dht # external dht22 sensor, if no this sensor connected will not have current temperature data.
  pin: GPIO13  # GPIO pin connected to the DHT22
  temperature:
    name: "room ac Temperature dht22"
    id: dht_temperature
  humidity:
    name: "room ac Humidity dht22"
  update_interval: 60s  
  
switch:
  - platform: restart
    name: "Restart ESP"

  - platform: template // Display LED
    name: "Display Switch"
    id: display_switch
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: [0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x93, 0xF4, 0xFB]
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: [0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x13, 0xF4, 0xFB]
